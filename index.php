<!-- Теги PHP -->

<?php echo 'если вы хотите хранить код PHP в документах XHTML или XML, то используйте эти теги'; ?>

<!-- Вы можете использовать короткий 'echo'-тег чтобы  -->
<?= 'напечатать эту строку' ?>.
<!-- Этот тег эквивалентен такому коду -->
<?php echo 'напечатать эту строку' ?>.

<? echo 'этот код с короткими тегами, но он будет работать только если '.'включена опция "short_open_tag"'; ?>


<!-- Важно -->
<!-- Поскольку короткие теги можно отключить, рекомендуется использовать только обычные теги (<?php ?> и <?='hello'?>) для максимальной совместимости. -->

<!-- Если файл содержит только код PHP, предпочтительно опустить закрывающий тег в конце файла.
Это помогает избежать добавления случайных символов пробела или перевода строки после закрывающего тега PHP,
которые могут послужить причиной нежелательных эффектов, так как PHP начинает выводить данные в буфер при
отсутствии намерения у программиста выводить какие-либо данные в этой точке скрипта. -->



<!-- Изолирование от HTML  -->
<p>Это будет проигнорировано PHP и отображено браузером.</p>
<?php echo 'А это будет обработано.'; ?>
<p>Это тоже будет проигнорировано PHP и отображено браузером.</p>

<!-- Продвинутое изолирование с использованием условий  -->
<?php if ($expression == true): ?>
  Это будет отображено, если выражение истинно.
<?php else: ?>
  В ином случае будет отображено это.
<?php endif; ?>



<!-- Разделение инструкций -->
<!-- Пример, показывающий закрывающий тег, охватывающий завершающую новую строку -->
<?php echo "Какой-то текст"; ?>
Нет новой строки
<?= "А сейчас, новая строка" ?>
<!-- Результат выполнения данного примера: -->
<!-- Какой-то текстНет новой строки
А сейчас, новая строка -->

<!-- Замечание: -->
<!-- Закрывающий тег PHP-блока в конце файла не является обязательным,
и в некоторых случаях его опускание довольно полезно, например,
при использовании include или require, так,
что нежелательные пробелы не останутся в конце файла и вы всё ещё сможете
добавить http-заголовки после подключения к ответу сервера.
Это также удобно при использовании буферизации вывода,
где также нежелательно иметь пробелы в конце частей ответа,
сгенерированного подключаемыми файлами. -->



<!-- Комментарии -->
<?php
    echo "Это тест"; // Это однострочный комментарий в стиле C++
    /* Это многострочный комментарий
       ещё одна строка комментария */
    echo "Это ещё один тест";
    echo "Последний тест"; # Это комментарий в стиле оболочки Unix
?>

<h1>Это <?php # echo "простой";?> пример</h1>
<p>Заголовок вверху выведет 'Это пример'.</p>



<!-- ТИПЫ -->
<!-- PHP поддерживает десять простых типов.
4 скалярных типа:
bool
int
float (число с плавающей точкой)
string

4 смешанных типа:
array
object
callable
iterable

2 специальных типа:
resource
NULL -->

<!-- Замечание: Если вы желаете проверить тип и значение определённого выражения, используйте var_dump().
Если же вам для отладки необходимо просто удобочитаемое представление типа,
используйте gettype(). Чтобы проверить на определённый тип, не используйте gettype(),
применяйте для этого функции is_type. Вот несколько примеров: -->
<?php
$a_bool = TRUE;   // логический
$a_str  = "foo";  // строковый
$a_str2 = 'foo';  // строковый
$an_int = 12;     // целочисленный

echo gettype($a_bool); // выводит: boolean
echo gettype($a_str);  // выводит: string

// Если это целое, увеличить на четыре
if (is_int($an_int)) {
    $an_int += 4;
}

// Если $a_bool - это строка, вывести её
// (ничего не выводит)
if (is_string($a_bool)) {
    echo "Строка: $a_bool";
}
?>